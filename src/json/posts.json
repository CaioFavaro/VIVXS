[
    {
        "id": 2,
        "titulo": "Api Gateway",
        "texto": "### O que faz: Controla requisições e gerencia autenticação \n\n ![gif do logo da linguagem de programação python](/assets/posts/1/gif-1.gif) \n\n ## Como: A API segue a estrutura Swagger, incluindo métodos GET para listar produtos, contratar serviços e consultar clientes. O GitHub Actions automatiza o deploy para o Azure, incluindo replicação do banco de dados em caso de falha. A conexão com sistemas legados (Oracle) é feita com configurações seguras, utilizando criptografia Jasypt para proteger credenciais e dados sensíveis \n\n Tecnologias: Java, Docker, Swagger, Jasypt, GitHub, Azure."
    },
    {
        "id": 3,
        "titulo": "Broker de mensagem",
        "texto": "### 0 que faz: Organiza e prioriza as mensagens e requisições \n\n ## Como: Criação de um endpoint na API Gateaway que envia as requisições diretamente para o Azure Service Bus. Suporta mensagens com propriedades customizadas, permitindo definir a prioridade de mensagens para garantir que requisições VIP sejam processadas primeiro. \n\n Tecnologias: Azure Service Bus"
    },
    {
        "id": 4,
        "titulo": "Virtualização de dados/MiddleWare de Integração ",
        "texto": "## O que faz: Decide se os dados devem ser recuperados do Sistema Legado ou do Data Mesh. E realiza a transformação e integração dos dados entre diferentes sistemas. \n\n # Como: Glue Data Catalog para registrar todas as fontes de dados. ETL Jobs para transformar e integrar dados entre diferentes fontes. Athena para consultar esses dados de forma virtual, sem a necessidade de movê-los. \n\n Tecnologia: Serviços da AWS"
    },  
    {
        "id": 5,
        "titulo": "Sistemas Legados",
        "texto": "### Oque faz: Sistema antigo com dados históricos dos clientes. \n\n ## Como: A API integra-se ao banco de dados Oracle, que armazena dados críticos. Utilizando Spring Data JPA, a aplicação mapeia as entidades para as tabelas existentes. Estratégias de failover e replicação garantem continuidade do serviço, com uma instância secundária do banco de dados disponível em caso de falhas. A segurança é reforçada com criptografia Jasypt para proteger credenciais e dados sensíveis. \n\n Tecnologia: Oracle, Spring Data JPA, Jasypt." 
    },
    {
        "id": 6,
        "titulo": "Data Mesh",
        "texto": "## O que faz: Arquitetura de dados descentralizada, com equipes responsáveis por seus próprios dados, garantindo escalabilidade e flexibilidade. Armazena registros de alterações e transações, especialmente em caso de falhas \n\n ![Gif explicativo sobre Data Mesh](/assets/posts/7/gif1.gif) \n\n # Como: Implementação do Data Mesh com políticas de acesso, replicação em tempo real, caching inteligente e autoescalabilidade. Integração com sistemas legados e registro de operações em um painel de logs \n\n Tecnologia: AWS, DynamoDB, CloudWatch, Amazon Shield. "
    },
    {
        "id": 7,
        "titulo": "Sistema de Monitoramento",
        "texto": "### O que: Monitora todos os componentes do sistema e gera alertas quando necessário. \n\n ## Como: Configuração do arquivo prometheus.yml para definir os endpoints de onde as métricas serão coletadas. Esses endpoints podem ser serviços como API Gateway, Broker de Mensagens, e sistemas de cache que expõem métricas via HTTP (Prometheus). Temos um painel Dashboard com estas informações; Configurado para enviar alertas quando certas condições forem atendidas, como alta latência, erros 5xx, ou falha de comunicação. \n\n Tecnologia: Power BI; Prometheus; Power automate."
    }

  
]
