[
    {
        "id": 1,
        "titulo": "APP Vivo",
        "texto": "O aplicativo Vivo desempenha um papel crucial na solução proposta, que visa resolver problemas relacionados à segregação de clientes, tempo de resposta, e degradação de serviço. Ele faz parte de uma arquitetura moderna que integra sistemas legados, garantindo escalabilidade, alta disponibilidade, e integridade dos dados. \n\n ### Conexão \n\n O App Vivo interage diretamente com o API Gateway, que gerencia o tráfego de solicitações entre o aplicativo e os sistemas internos da empresa. Esse gateway atua como um ponto central para autenticação e políticas de acesso, além de fazer o roteamento dinâmico das solicitações, otimizando a distribuição de carga. \n\n ### Tecnologias Avançadas da Soulução? \n\n Processamento assíncrono para garantir que o aplicativo funcione sem interrupções, mesmo durante picos de uso. Balanceamento de carga e autoescala para lidar com o aumento do tráfego de forma eficiente, assegurando que o aplicativo continue performando bem em qualquer circunstância.Circuit Breakers, que protegem o sistema de falhas, isolando partes problemáticas sem comprometer o restante do serviço. Monitoramento em tempo real e análise preditiva para antecipar problemas e evitar falhas antes que elas impactem a experiência do usuário. \n\n ![gif do logo da linguagem de programação python](/assets/posts/1/gif-1.gif) \n\n"
    },
    {
        "id": 2,
        "titulo": "Api Gateway",
        "texto": "### Introdução \n\n A API Gateway na solução VivoConnect desempenha um papel central como intermediário entre o aplicativo e os sistemas internos da organização. Sua função é gerenciar, autenticar, e rotear solicitações do App Vivo e outros serviços, garantindo segurança, escalabilidade e alta performance. \n\n \n\n ### Principais características \n\n \n\n > A API Gateway atua como um ponto de entrada unificado para todas as requisições enviadas pelo aplicativo. Ele faz o roteamento das solicitações para os serviços corretos, seja um sistema legado ou uma camada moderna de virtualização de dados. Esse roteamento pode ser baseado em URLs, métodos HTTP e outros critérios. \n\n  \n\n > A segurança é uma prioridade, e a API Gateway integra mecanismos robustos de autenticação, como OAuth e servidores web como NGINX. Isso garante que apenas usuários autorizados possam acessar os recursos, além de aplicar políticas de segurança específicas para diferentes serviços. \n\n \n\n >  O roteamento dinâmico permite que as requisições sejam redirecionadas para diferentes instâncias ou servidores, dependendo da carga e das necessidades do sistema. Esse mecanismo é essencial para lidar com mudanças na demanda e garantir que o sistema funcione sem interrupções. \n\n \n\n >Uma das principais responsabilidades da API Gateway é distribuir as solicitações de forma equilibrada entre os servidores disponíveis, evitando sobrecarga e garantindo que todas as requisições sejam processadas de forma eficiente. Isso melhora tanto a performance quanto a escalabilidade da solução.\n\n  \n\n > A API Gateway implementa circuit breakers, que protegem o sistema de falhas em cascata. Se uma parte do sistema começa a falhar, o circuito é “aberto”, evitando que novas requisições sejam encaminhadas para aquela parte, o que ajuda a manter o restante do sistema funcional. \n\n \n\n >A API Gateway inclui recursos de monitoramento em tempo real e análises preditivas, ajudando a detectar e prever possíveis falhas ou gargalos antes que eles afetem o sistema. Essas ferramentas ajudam a manter o serviço sempre disponível e em alta performance. \n\n \n\n >Para otimizar a latência e o uso da banda de rede, a API Gateway também usa compressão de dados (como Gzip) e caching inteligente. Isso diminui o volume de dados trafegados e melhora a velocidade de resposta do sistema. \n\n \n\n  #### Conclusão \n\n \n\n A API Gateway, ao integrar todas essas funcionalidades, oferece uma camada crítica de gerenciamento e otimização para a solução VivoConnect, garantindo que o sistema funcione de maneira segura, rápida e escalável."
    },
    {
        "id": 3,
        "titulo": "Broker de mensagem/Middleware de roteamento",
        "texto": "O Broker de Mensagens e Middleware de Roteamento são componentes essenciais na arquitetura VivoConnect, responsáveis pela gestão eficiente do tráfego de dados e comunicação entre sistemas de forma assíncrona, garantindo a integridade e a priorização das mensagens. Eles desempenham um papel importante no gerenciamento da comunicação entre diferentes serviços e aplicativos, proporcionando alta escalabilidade e resiliência.\n\n ### Processamento e Ordenação \n\n O broker organiza e processa as mensagens de forma assíncrona, permitindo que elas sejam priorizadas com base em cabeçalhos específicos, como mensagens VIP. Esse mecanismo garante que as mensagens mais importantes sejam tratadas com prioridade, otimizando o fluxo de dados.\n\n ### Tecnologias Empregadas \n\n - Circuit Breakers: Esses circuitos protegem o sistema de falhas, isolando partes problemáticas e evitando que elas afetem o restante da solução. \n - Balanceamento de Carga: O middleware de roteamento assegura que as mensagens sejam distribuídas uniformemente entre os servidores disponíveis, evitando sobrecarga e mantendo a performance do sistema. \n - Roteamento Dinâmico: Utilizando URLs e métodos HTTP, o middleware garante que as requisições sejam direcionadas para os serviços corretos com base na demanda e nos critérios definidos.\n\n ### Escalabilidade e Monitoramento \n\n Com recursos de escalabilidade dinâmica, o broker e o middleware ajustam automaticamente a capacidade de processamento de mensagens conforme a carga de trabalho aumenta ou diminui. Além disso, monitoramento em tempo real e análise preditiva são usados para detectar gargalos e prever possíveis falhas, garantindo a continuidade do serviço sem interrupções.\n\n\"
    },
    {
        "id": 4,
        "titulo": "Virtualização de dados",
        "texto": "A Virtualização de Dados é um componente fundamental da solução VivoConnect, projetado para fornecer acesso unificado a dados distribuídos em diferentes sistemas e bases de dados heterogêneas, sem a necessidade de replicação física. Essa camada abstrai a complexidade dos dados, garantindo eficiência e consistência nas operações.\n\n ### Abstração e Caching Inteligente \n\n A virtualização de dados permite que os sistemas interajam com uma camada de abstração, simplificando o acesso e a manipulação de dados de diferentes fontes. Para otimizar ainda mais o desempenho, é implementado um caching inteligente, que armazena dados acessados com frequência, reduzindo a latência nas consultas e garantindo respostas mais rápidas.\n\n ### Tecnologias Avançadas \n\n - Replicação de Dados: A virtualização oferece replicação assíncrona para dados não críticos, garantindo alta disponibilidade, enquanto a replicação síncrona é aplicada a dados críticos, assegurando consistência imediata. \n - Balanceamento de Carga e Autoescala: Através de machine learning, o sistema ajusta automaticamente a capacidade de processamento e distribui a carga de trabalho de maneira uniforme, melhorando a eficiência operacional. \n - Política de Dados com IA: Ferramentas de inteligência artificial são usadas para classificar e rotular dados com base em seu conteúdo e sensibilidade, detectando padrões anômalos de uso, otimizando a performance, e garantindo conformidade com padrões de segurança e regulamentação.\n\n ### Monitoramento e Autocorreção \n\n A camada de virtualização de dados conta com monitoramento contínuo e sistemas de alertas para detecção de falhas ou comportamentos anômalos. Em caso de erros, a autocorreção é aplicada de forma proativa, utilizando scripts e algoritmos de diagnóstico para ajustar ou reiniciar processos sem intervenção manual, garantindo alta disponibilidade.\n\n\"
    {
        "id": 5,
        "titulo": "Middleware de integração",
        "texto": "Provavelmente, ao construir um website, você já deve ter reparado que muitos dos valores nos arquivos CSS são dados que se repetem constantemente, não é mesmo? Por exemplo, a paleta de cores que mantém o padrão visual da página é reutilizada em inúmeros pontos do código. Sendo assim, fazer a manutenção do projeto e alterar esses valores manualmente pode se tornar uma tarefa trabalhosa e passiva de erros, ainda mais em aplicações de grande escala.  \n\n Mas então, como podemos melhorar essa situação? \n\n Uma boa alternativa é utilizar as **Variáveis no CSS** como aliadas!  \n\n Se você ficou interessado e deseja descobrir como fazer isso, vem comigo que nesse artigo eu te ensinarei mais sobre esse assunto detalhadamente. \n\n ## Mas primeiro, o que são Variáveis de CSS? \n\n As variáveis de CSS, que também são chamadas de propriedades customizadas, trazem grandes benefícios e vão funcionar de forma bem semelhante às variáveis de linguagens de programação, ou seja, sua maior função é armazenar valores que serão utilizados posteriormente no código.  \n\n Elas permitem criar valores para todas as propriedades de CSS, sendo bastante utilizadas para gerenciar cores, fontes, valores de animações etc. \n\n ## Como utilizar as Variáveis de CSS? \n\n As variáveis de CSS tem acesso ao DOM, o que permite que sejam declaradas globalmente ou localmente. Além disso, possuem uma sintaxe característica que já tivemos um pequeno spoiler na imagem acima. Vamos entender melhor como funciona? \n\n ### Sintaxe \n\n A declaração ou criação de uma variável no arquivo CSS é composta por 4 partes, veja a seguir: \n\n - **1º:** Dois hífens (--) \n\n - **2º:** Nomeação da variável \n\n - **3º:** Dois pontos (:) \n\n - **4º:** Valor da variável \n\n É importante destacar que alguns caracteres não são permitidos na nomeação, como por exemplo: ; # } ] ) etc. \n\n A aplicação das variáveis dentro de um elemento HTML em uma determinada propriedade CSS, é feita por meio da associação entre a função `var()` e o nome da variável, que é passada como parâmetro dentro dos parênteses. Dessa forma: \n\n ``` \n\n body { \n\n background: var(--global-primary-color); \n\n } \n\n ``` \n\n ### Declaração global \n\n Fazemos isso declarando a variável dentro da pseudo classe `:root`. Esse seletor corresponde a raiz, é o mesmo que `<html>` em si, só que possui uma especificidade maior. Por meio do root, estamos disponibilizando elas globalmente, podendo ser utilizadas em qualquer lugar do documento.  \n\n ### Declaração local \n\n Para isso, declaramos a variável dentro do seletor que irá utilizá-la. Assim, ficarão restritas ao escopo da onde elas foram declaradas, sendo herdadas apenas pelos elementos filhos. \n\n ## De onde surgiu? \n\n As variáveis são um recurso que durante muitos anos foi bastante solicitado. Isso porque, anteriormente, essa solução só era possível por meio de pré-processadores, como Sass, Stylus ou através de CSS in JS. Esses artifícios atuam como grandes parceiros, mas ainda sim havia algumas lacunas que faltavam ser preenchidas e que somente foram contempladas com as variáveis no CSS. \n\n O principal ponto a se destacar é que as variáveis de pré processadores são estáticas e necessitam da etapa de compilação, ou seja, todas as funções, mixins e interpolações que ocorrem no Sass retornam CSS puro, para serem interpretadas pelo navegador.  \n\n Já as variáveis de CSS funcionam em tempo de execução, são dinâmicas e funcionam de forma independente das tecnologias usadas, atuando em qualquer contexto, sem precisar de etapas adicionais. \n\n Além disso, ocorrem outras limitações com as variáveis de pré-processamento, como por exemplo a impossibilidade de uso de variáveis por meio do @extend nos medias query, a falta de aplicação da herança e efeito cascata nos elementos e como não há acesso ao DOM, não é possível serem controladas via JavaScript. \n\n ## E quais são as principais vantagens no uso? \n\n ### Código claro  \n\n Afinal, ler `--cor-principal-bordas` é muito mais semântico do que ler #B4E197, onde rapidamente conseguimos entender do que se trata.  \n\n ### Favorece a manutenção  \n\n É possível alterarmos a folha de estilo em muitos lugares, apenas alterando o valor da variável em um único lugar, o que otimiza o tempo de trabalho e evita que possíveis erros de escrita aconteçam. \n\n ### Criação de temas  \n\n Com as variáveis, você pode criar e editar facilmente seus guias de estilos ou construir de maneira mais facilitada temáticas, um exemplo clássico disso é na construção de light/dark mode e como as variáveis de CSS são dinâmicas e tem acesso ao DOM, é possível ter um controle maior por meio da manipulação via Java Script, veja um exemplo prático nesse [Alura+ de Dark Mode](https://cursos.alura.com.br/extra/alura-mais/dark-mode-um-projeto-em-html-css-c1369).  \n\n ## Conteúdo extra \n\n ### Cascata CSS \n\n São beneficiadas pela cascata do CSS, onde podemos atribuir um novo valor a uma variável, de modo que os elementos filhos irão herdar as características do seu elemento pai mais próximo. \n\n ### Relação com o @media query \n\n Atualmente, ainda não podemos utilizar variáveis como medidas de resolução de tela no @media query, dessa forma: \n\n ``` \n\n :root { \n\n --sm: 640px; \n\n } \n\n @media (max-width: var(--sm)) {   \n\n ... \n\n } \n\n ``` \n\n Ainda é necessário utilizar medidas fixas, mas dentro dos media queries é possível aplicar as variáveis, sem que haja problema algum. \n\n ``` \n\n :root { \n\n --color-text-desktop: red; \n\n --color-text-mobile: blue \n\n } \n\n h1 { \n\n color: var(--color-text-desktop) \n\n } \n\n @media (max-width: 640px) { \n\n h1 { \n\n color: var(--color-text-mobile) \n\n } \n\n } \n\n ``` \n\n ### Suporte ao navegador \n\n Segundo o site [Can I use](https://caniuse.com/?search=variables), em relação ao suporte aos navegadores, as variáveis são compatíveis em praticamente todos os navegadores modernos de maneira satisfatória.  \n\n ## Agora é com você!  \n\n Neste artigo, nós aprendemos sobre o poder do uso das variáveis no CSS em um projeto, entendemos melhor sobre os seus conceitos, vantagens e aplicação.  \n\n Para aprofundar o seu mergulho ainda mais no [desenvolvimento front-end](https://www.alura.com.br/artigos/o-que-e-front-end-e-back-end), enriquecer seu portfólio e aplicar as variáveis de CSS em diversos projetos incríveis, não deixe de realizar os cursos da [formação front-end](https://www.alura.com.br/formacao-front-end). \n\n Agora me conta, você já utilizava as variáveis em sua rotina de desenvolvimento? Se sim, te convido a contar para nós aqui no fórum ou no discord da Alura as suas impressões da prática com elas. E se você nunca tinha ouvido falar ou se este conteúdo te ajudou de alguma forma, não deixe de dar o seu feedback, sua opinião é muito valiosa para nós e nos ajudar a evoluir e te proporcionar cada vez mais uma melhor experiência de aprendizado.  \n\n Até a próxima e bons estudos!  \n\n "
    },
    {
        "id": 6,
        "titulo": "Sistemas legados",
        "texto": "Quando entramos na área da tecnologia é como se estivéssemos descobrindo um mundo completamente novo. E, nessa caminhada, você pode se sentir só e sem rumo. Então, para lhe mostrar que não tem apenas você nessa jornada, vou trazer nesse artigo algumas comunidades de [front-end](https://www.alura.com.br/artigos/o-que-e-front-end-e-back-end) para que possa conhecer e fazer parte. \n\n ## O que é uma comunidade?\n\n Comunidade é um grupo de pessoas que se reúnem para trocar ideias, dividir experiências e criar eventos (como palestras e workshops, que podem ser presenciais ou on-line). Nesses grupos, diversos temas são debatidos, principalmente sobre as principais demandas do mercado e as tendências da atualidade. \n\n Esses espaços são conhecidos por oferecerem bastante suporte, o que é incrível para quem está começando agora na carreira de dev. Neles, você encontrará desde as pessoas iniciantes até as mais experientes e todas estão dispostas a ajudar com qualquer dúvida. O fato é que uma pessoa antes de você já pode ter tido perguntas semelhantes às suas e, nesses grupos, você pode encontrar a solução rapidamente.\n\n Além disso, você pode se manter informado sobre as boas práticas, novidades, receber feedbacks, conhecer pessoas novas e se conectar com elas. Aliás, fazer networking é importante em qualquer área, pois, ao se conectar com diferentes tipos de pessoas, você não cresce apenas profissionalmente, mas como indivíduo também. \n\n Há muitas comunidades para pessoas desenvolvedoras por aí. Por isso,nesse artigo, irei trazer as principais comunidades voltadas para o Front-end.  \n\n Vamos lá?\n\n ## Comunidades do Front-end para fazer parte   \n\n### Stack Overflow\n\n O [Stack Overflow](https://pt.stackoverflow.com/) é um site de perguntas e respostas dedicado a pessoas que já programam ou que querem aprender a programar. A comunidade responde e faz perguntas constantemente, e as pessoas usuárias votam nas melhores para que elas subam no feed e sejam encontradas com mais facilidade. Existem muitas perguntas em inglês, mas, se você quiser, pode ir até a parte que está tudo em português. Legal, né? \n\n Você também ganha reputação quando vota nas suas perguntas e respostas. Em níveis mais altos, você ganha privilégios como a permissão de moderação e passa a ajudar a manter a qualidade do site e da comunidade. \n\n ### GitHub\n\n  O GitHub é uma plataforma onde você compartilha seu código e arquivos com controle de versão usando o Git. Ele é como uma rede social para pessoas que programam. Assim, você pode seguir pessoas, trocar mensagens e contribuir em projetos privados ou [Open Source](https://www.alura.com.br/artigos/open-source-uma-breve-introducao).\n\n  Apesar do GitHub ter muitas trocas em inglês, vou trazer aqui uma opção maravilhosa em português.  \n\n Na plataforma existe um fórum incrível chamado [Front-end Brasil](https://github.com/frontendbr). Ele foi criado com o objetivo de reunir dúvidas vindas de outras redes sociais, como Facebook, mas que acabavam perdidas depois de um tempo. Ou seja, as pessoas criadoras deste espaço queriam unificar todas as discussões em um só local e escolheram, justamente, o GitHub por ser mais fácil de encontrar dúvidas antigas. \n\n Na página principal tem o link que te leva para o fórum, outro para divulgação de vagas na área de Front-end e o terceiro link vai para a parte de eventos. O mais legal é que qualquer pessoa pode adicionar uma vaga, criar um evento ou dar sugestões, desde que esteja dentro das diretrizes do site, claro.  \n\n ### MDN Web Docs \n\n O [MDN Web Docs](https://developer.mozilla.org/pt-BR/) é um projeto colaborativo open source que documenta tecnologias de plataforma da Web, como HTML, CSS, JavaScript e APIs da Web. Eles também fornecem uma grande coleção de recursos aprendizagem para devs e estudantes iniciantes, como uma [trilha de estudos](https://developer.mozilla.org/pt-BR/docs/Learn/Front-end_web_developer) para desenvolvimento front-end, que você pode acessar em inglês ou português. Top, né? \n\n Nessa área, o MDN se propõe a levar você de iniciante a confortável, para que, a partir desse conhecimento básico, você trilhe seu caminho no mundo da programação. E caso você tenha dúvidas ou fique preso em um problema, eles também disponibilizam um fórum para que você poste sua pergunta e outras pessoas possam te ajudar.  \n\n ### Coderwall \n\n O [Coderwall](https://coderwall.com/t/web/popular)  é uma comunidade de devs  para aprender e compartilhar dicas de programação. Há uma seção de dicas específicas para ajudar a resolver problemas ou aprender coisas novas, separadas por tags. Você pode pesquisar “front-end”, por exemplo, e irá encontrar tudo relacionado ao assunto. \n\n Além de existir muitos recursos para iniciantes e devs mais experientes, também há áreas exclusivas para dicas de JavaScript, CSS, HTML, Python, Ruby, iOS e vários outros assuntos, em que você tem total liberdade para perguntar ou postar dicas.  \n\n Um ponto importante é que a maior parte do conteúdo é em inglês, mas isso não precisa ser um empecilho, pois você pode usar o recurso de tradução caso queira, como o [Google Tradutor](https://translate.google.com.br/?hl=pt-BR) ou o [DeepL](https://www.deepl.com/translator). \n\n  ### WoMakersCode \n\n A [WoMakersCode](https://www.linkedin.com/company/womakerscode/) tem a missão de inspirar e impulsionar meninas e mulheres que desejam ingressar ou se especializar em carreiras ligadas à tecnologia e inovação. Dessa forma, é uma organização que cria várias iniciativas de capacitação, mentoria, empregabilidade e conteúdos digitais. Ou seja, você mulher que se sente sozinha nessa área, onde os homens ainda são maioria, tem a possibilidade de se conectar com outras mulheres e aprender muito com elas. \n\n A organização também disponibiliza várias palestras, workshops e feira de vagas que você pode se inscrever através [desse link](https://linktr.ee/womakerscode) de forma online e gratuita. E olha só que demais: se quiser, você pode se inscrever para ser palestrante voluntária. \n\n ### She's Tech \n\n A She’s Tech tem três pilares: inspirar, engajar e capacitar. Ela atua pela conscientização do mercado sobre a diversidade, inclusão e estimula a auto-aceleração através da liderança e protagonismo. \n\n Além disso, por meio dela, diversos eventos online e gratuitos são promovidos, onde outras mulheres que já estão atuando na área da tecnologia repassam o que aprenderam durante a vida. Essa comunidade também possui um [grupo no telegram](https://t.me/shestech) para postar e compartilhar oportunidades de trabalho, eventos e cursos para mulheres. \n\n ### Minas Programam \n\n O [Minas Programam](http://minasprogramam.com/) foi criado para desafiar  a influência dos estereótipos de gênero e de raça na relação de mulheres com as áreas de ciências, tecnologia e computação, de acordo com as criadoras. \n\n É um projeto que dá oportunidades de aprendizado sobre programação para meninas e mulheres (cis ou trans) e pessoas não-binárias, especialmente aquelas que são negras ou indígenas, por meio de cursos gratuitos, dicas de livros, oficinas e apoio para as futuras devs que não têm um computador para começar a programar. \n\n ### Comunidades Tech \n\n O [Comunidades Tech](https://comunidades.tech/) é um projeto open source, onde você pode pesquisar por vários grupos de tecnologia e filtrar por: categoria, tipo, cidade, país, nome da comunidade, entre outros. Após escolher qual você quer participar, é só clicar para encontrar os links de entrada do grupo, que podem ser no discord, facebook, slack, meetup, telegram, whatsapp e até em podcast. \n\n Você também pode criar seu próprio grupo e cadastrar lá para que outras pessoas encontrem e sua comunidade cresça. \n\n ## Conclusão \n\n Muito legal né? E você, já participa de comunidades?  \n\n Sempre há novidades no mundo da programação e mergulhar em comunidades é muito importante para o seu desenvolvimento como dev. Se você já participa, usufrua de tudo o que ela tem para oferecer, ajude as pessoas, participe de conversas, vá aos encontros e palestras. \n\n Lembrando que se você é estudante da Alura temos a nossa própria comunidade no discord, onde você pode pedir ajuda e ajudar várias pessoas. Todas as pessoas estão sempre dispostas a dar aquela dica incrível ou achar o motivo daquele erro que você não consegue encontrar por nada.  \n\n Afinal, ninguém consegue fazer tudo só! Se você ainda não faz parte, venha e se encante.  \n\n Vou deixar [aqui o link](https://cursos.alura.com.br/extra/alura-mais/comunidade-no-discord-c1400)  para o Alura+ do João Manoel sobre a comunidade da Alura no discord, onde ele mostra como você faz para entrar e explica tudo sobre como utilizar esse aplicativo. Caso você não tenha muita familiaridade, indico muito que assista.  \n\n Ah! E se tiver mais dicas de comunidade indique pra gente lá no nosso canal do discord, tenho certeza que todo mundo vai gostar.  \n\n Agora é com você! Pesquise sobre as comunidades e participe das que gostar mais.  \n\n "
    },
    {
        "id": 7,
        "titulo": "Data Mesh",
        "texto": "Você já deve ter preenchido um formulário que não indicava claramente o porquê de algum campo não estar válido e teve que ficar adivinhando quantos caracteres sua senha precisava ter ou que tipo de caracteres deveria receber. Ou, em um formulário longo, já ocorreu de preencher apenas os campos que achava serem requeridos e só no final, ao tentar submeter os dados, se deparou com inúmeras mensagens de erro mostrando que diversos outros campos eram obrigatórios? Chato, né? Vem aprender como melhorar essa experiência com o uso das validações customizadas do Angular!\n\nNeste artigo, você vai aprender como:\n\n\n\n- Criar um formulário reativo;\n\n- Aplicar validações padrão e criar validações customizadas;\n\n- Mostrar os erros de validação apenas quando o campo for acessado;\n\n- Habilitar o botão de submeter os dados apenas quando o formulário estiver válido.\n\n\n\nVamos lá?\n\n\n\nCriar formulários é algo muito comum na rotina de devs front-end. Tanto em formulários mais simples e, principalmente à medida que a quantidade de campos do formulário cresce, é necessário implementar validações. \n\n\n\nAs validações são importantes para prevenir erros de cadastro e garantir que as informações preenchidas estejam no formato esperado, mas é preciso deixar claro todas as particularidades dos campos a serem preenchidos, a fim de promover uma interação mais dinâmica e amigável das pessoas com nossa aplicação. \n\n\n\n## O que são formulários reativos?\n\n\n\nNo Angular, existem dois tipos diferentes de formulários: *template drive* e *data driven*. Os do tipo *template driven* são criados e configurados no `component.html`; as validações também são incluídas no template e os valores do formulário são submetidos através da diretiva *ngSubmit*.\n\n\n\nJá os formulários *data driven* (orientados a dados) são criados e configurados no `component.ts` e a maior parte do código fica nesse arquivo e não no html. Dessa forma, temos um template mais limpo, apenas com a estrutura básica do formulário, já que todas as validações são feitas no componente. No html é feita a associação do template ao componente e não precisamos obrigatoriamente do *ngSubmit*.\n\n\n\nFáceis de criar e de dar manutenção, os formulários reativos, como também são conhecidos, são bastante utilizados devido ao seu poder e capacidade de conseguir reagir a mudanças que acontecem no formulário, utilizando [observables](https://www.alura.com.br/curso-online-angular-rxjs-introducao-programacao-reativa). \n\n\n\nAgora nós vamos entender como podemos criar um formulário reativo e aplicar validações nele. \n\n\n\n## O que precisamos configurar?\n\n\n\nCom a aplicação criada, precisamos importar o `reactiveformsModule` no arquivo `app.module.ts` e colocar no array de *imports* do `ngModule`, assim:\n\n\n\n```\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n\n@NgModule({\n\n  declarations: [\n\nAppComponent\n\n  ],\n\n  imports: [\n\nBrowserModule,\n\nAppRoutingModule,\n\nReactiveFormsModule\n\n  ],\n\n  providers: [],\n\n  bootstrap: [AppComponent]\n\n})\n\n\n\nexport class AppModule { }\n\n```\n\n\n\nSe você tem dúvidas nesse passo, [veja aqui como começar com o Angular](https://www.alura.com.br/artigos/como-comecar-com-angular) e [como criar sua primeira aplicação](https://www.alura.com.br/artigos/criando-aplicacoes-angular-com-angular-cli).\n\n\n\nAgora, vamos criar no “app.component.ts” uma variável chamada formulario do tipo **FormGroup** (deve ser importado também), que é uma classe do Angular que vai nos ajudar na implementação e validação dos forms. Outra classe importante que veremos mais à frente é o **FormControl**.\n\n\n\n```\n\nimport { FormGroup } from '@angular/forms';\n\n\n\nformulario: FormGroup;\n\n```\n\n\n\nA abordagem que vamos utilizar para criar nosso formulário é através da injeção de dependência do *service* **FormBuilder**. Esse serviço fornece métodos para gerar controles de formulários e evita a criação manual de instâncias de controle. Para isso vamos ter que:  \n\n\n\n- Importar a classe FormBuilder;\n\n- Injetar o service FormBuilder;\n\n- Gerar o conteúdo do formulário.\n\n\n\nVamos criar um formulário com 4 campos:\n\n\n\n- nome\n\n- username\n\n- email\n\n- senha\n\n\n\nNosso `app.component.ts` ficará assim:\n\n\n\n```\n\nimport { Component } from '@angular/core';\n\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n\n\n@Component({\n\n  selector: 'app-root',\n\n  templateUrl: './app.component.html',\n\n  styleUrls: ['./app.component.css']\n\n})\n\nexport class AppComponent {\n\n\n\n  formulario: FormGroup;\n\n\n\n  constructor(private formBuilder: FormBuilder) { }\n\n\n\n  ngOnInit(): void {\n\nthis.formulario = this.formBuilder.group({\n\nnome: [''],\n\nusername: [''],\n\nemail: [''],\n\nsenha: ['']\n\n});\n\n  }\n\n}\n\n```\n\n\n\nTambém precisamos criar a estrutura do formulário no template com os quatro campos. Agora, antes de implementar as validações, vamos fazer a sincronização do formulário criado no componente com o template para vermos se está tudo certo.\n\n\n\nPara isso podemos usar uma diretiva do `ReactiveFormsModule` chamada **formGroup**. E na tag *form* do html vamos atribuir a diretiva à nossa variável *formulario* e fazer um *property binding*, porque sempre que o campo for modificado, queremos atualizar e atribuir o valor ao formulário.\n\n\n\n```\n\n<form [formGroup]=\"formulario\"></form>\n\n```\n\n\n\nPara associar cada input utilizamos outra diretiva chamada **formControlName**, fazendo um link entre o campo no html e o componente e passando exatamente o nome das variáveis que criamos através do FormBuilder.\n\n\n\n```\n\n<input id=\"nome\" type=\"text\" formControlName=\"nome\" >\n\n<input id=\"username\" type=\"text\" formControlName=\"username\" >\n\n<input id=\"email\" type=\"email\" formControlName=\"email\" >\n\n<input id=\"senha\" type=\"password\" formControlName=\"senha\" >\n\n```\n\n\n\nNosso formulário está assim (estilizado com o [Angular Material](https://material.angular.io/)). \n\n\n\n ## Aplicando as validações\n\n\n\nAgora, vamos incluir as seguintes validações na aplicação:\n\n\n\n- Todos os campos serão de preenchimento obrigatório;\n\n- O campo username aceitará apenas letras minúsculas;\n\n- Verificação do preenchimento correto do formato de e-mail;\n\n- Quantidade mínima de caracteres para a senha será 6.\n\n\n\nPara começar, vamos importar a classe **Validators**:\n\n\n\n```\n\nimport { Validators } from '@angular/forms';\n\n```\n\n\n\nEssa classe já traz vários métodos de validação prontos e fáceis de usar como por exemplo:\n\n\n\n- required() - campo de preenchimento obrigatório;\n\n- maxLength() - quantidade máxima de caracteres permitido;\n\n- minLength() - quantidade mínima de caracteres permitido;\n\n- email() - valida o formato de e-mail;\n\n\n\n[Veja aqui a lista completa de métodos da classe Validators](https://angular.io/api/forms/Validators).\n\n\n\nAgora vamos implementar as validações no formulário, passando os métodos de validação como segundo parâmetro do array criado no `component.ts`. \n\n\n\n```\n\nngOnInit(): void {\n\nthis.formulario = this.formBuilder.group({\n\nnome: ['', [Validators.required]],\n\nusername: ['',  [Validators.required]],\n\nemail: ['', [Validators.required, Validators.email]],\n\nsenha: ['', [Validators.required, Validators.minLength(6)]]\n\n});\n\n  }\n\n```\n\n\n\n## Exibindo mensagens de erro\n\n\n\nPara exibir mensagens referentes às validações, vamos incluir no html, abaixo do input, uma div com a diretiva *ngIf, passando o formulário e pegando os erros do campo passado como parâmetro, e incluindo a mensagem que queremos apresentar:\n\n\n\n```\n\n<div *ngIf=\"formulario.get('nome')?.errors>\n\nNome obrigatório\n\n</div>\n\n```\n\n\n\nVamos replicar isso em cada campo e ver o resultado:\n\n\n\nOk, agora as mensagens estão aparecendo, mas já no carregamento inicial da aplicação. Será que existe uma forma mais amigável de apresentá-las? Apenas quando o campo for acessado? Sim!! Podemos fazer isso através de uma propriedade do FormControl chamada **touched**. Seu valor inicial é *false* e sempre que o input dispara o evento *onBlur*, ou seja, quando o campo é acessado e perde o foco, a propriedade recebe o valor *true*.\n\n\n\nNo exemplo do campo *nome* ficará assim: \n\n\n\n```\n\n<div *ngIf=\"formulario.get('nome')?.errors?.['required'] && formulario.get('nome')?.touched>\n\nNome obrigatório\n\n</div>\n\n```\n\n\n\nReplicando para os outros campos, agora as mensagens de erro aparecem apenas quando necessário.\n\n\n\n ## Criando validações customizadas\n\n\n\nA validação que queremos incluir para que o campo username receba apenas letras minúsculas não está presente na classe ``Validators``. Mas não tem problema, pois é possível criar inúmeras validações customizadas que atendam às suas necessidades.\n\nNo nosso exemplo, criamos um arquivo chamado `minusculoValidator.ts`, importamos a classe **Abstract Control** e criamos a lógica da validação. \n\n\n\n`minusculoValidator.ts`:\n\n```\n\nimport { AbstractControl } from \"@angular/forms\";\n\n\n\nexport function minusculoValidator(control: AbstractControl) {\n\nconst username = control.value as string;\n\nif(username !== username?.toLowerCase()) {\n\nreturn { minusculo: true };\n\n} else\n\nreturn null;\n\n}\n\n```\n\n\n\nDepois disso, importamos a validação no componente e incluímos no array junto com as outras validações.\n\n\n\n`app.component.ts`:\n\n```\n\nusername: ['',  [Validators.required, minusculoValidator]],\n\n```\n\n\n\n`app.component.html`:\n\n```\n\n<div *ngIf=\"formulario.get('username')?.errors?.['minusculo’] && formulario.get('username')?.touched\">\n\nEsse campo aceita apenas letras minúsculas\"\n\n</div>\n\n```\n\n\n\nAssim, através da propriedade *errors*, podemos criar mensagens customizadas dependendo do erro que seja disparado.\n\n\n\n## Desabilitar/Habilitar o botão\n\n\n\nOutro ponto importante é que o botão para envio dos dados está habilitado desde o início, mesmo que os campos não tenham sido preenchidos. Vamos resolver isso?\n\n\n\nO formulário possui a propriedade *valid* e podemos fazer um property binding atribuindo-a à propriedade disabled do botão e assim criar uma lógica para que o botão fique habilitado apenas quando o formulário estiver válido, ou seja, quando todos os campos forem preenchidos corretamente.\n\n\n\n`app.component.html`:\n\n```\n\n<button [disabled]=\"!formulario.valid\">\n\nCadastre-se\n\n</button>\n\n```\n\n\n\n"
    }
  
]
